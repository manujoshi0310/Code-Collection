2023.03.27 11:21:15 INFO  Started: Metals version 0.11.11 in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection' for client Visual Studio Code 1.76.1.
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/C:/Users/Manu/AppData/Local/Coursier/cache/v1/https/repo1.maven.org/maven2/com/outr/scribe-slf4j_2.13/3.11.0/scribe-slf4j_2.13-3.11.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
2023.03.27 11:21:17 INFO  time: initialize in 2.02s
2023.03.27 11:21:18 WARN  Build server is not auto-connectable.
2023.03.27 11:21:18 WARN  no build tool detected in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection'. The most common cause for this problem is that the editor was opened in the wrong working directory, for example if you use sbt then the workspace directory should contain build.sbt. 
2023.03.27 11:21:18 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java
2023.03.27 11:21:20 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Java/imageProcessing.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:12: error: ';' expected
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat
                                                              ^
1 error
Mar 27, 2023 11:21:22 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.ArrayIndexOutOfBoundsException
java.util.concurrent.CompletionException: java.lang.ArrayIndexOutOfBoundsException
	at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:292)
	at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:308)
	at java.util.concurrent.CompletableFuture.uniAccept(CompletableFuture.java:661)
	at java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:646)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.eclipse.jdt.internal.core.util.PublicScanner.getCurrentTokenSource(PublicScanner.java:496)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.swallowUntilSemicolon$1(JavaFoldingRangeExtractor.scala:52)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.gatherImportLines$1(JavaFoldingRangeExtractor.scala:76)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.gather$1(JavaFoldingRangeExtractor.scala:123)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.extract(JavaFoldingRangeExtractor.scala:155)
	at scala.meta.internal.parsing.FoldingRangeProvider.$anonfun$getRangedForJava$2(FoldingRangeProvider.scala:48)
	at scala.Option$WithFilter.map(Option.scala:242)
	at scala.meta.internal.parsing.FoldingRangeProvider.getRangedForJava(FoldingRangeProvider.scala:43)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$3(MetalsLspService.scala:1776)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:678)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more

Mar 27, 2023 11:21:29 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.ArrayIndexOutOfBoundsException
java.util.concurrent.CompletionException: java.lang.ArrayIndexOutOfBoundsException
	at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:292)
	at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:308)
	at java.util.concurrent.CompletableFuture.uniAccept(CompletableFuture.java:661)
	at java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:646)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.eclipse.jdt.internal.core.util.PublicScanner.getCurrentTokenSource(PublicScanner.java:496)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.swallowUntilSemicolon$1(JavaFoldingRangeExtractor.scala:52)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.gatherImportLines$1(JavaFoldingRangeExtractor.scala:76)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.gather$1(JavaFoldingRangeExtractor.scala:123)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.extract(JavaFoldingRangeExtractor.scala:155)
	at scala.meta.internal.parsing.FoldingRangeProvider.$anonfun$getRangedForJava$2(FoldingRangeProvider.scala:48)
	at scala.Option$WithFilter.map(Option.scala:242)
	at scala.meta.internal.parsing.FoldingRangeProvider.getRangedForJava(FoldingRangeProvider.scala:43)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$3(MetalsLspService.scala:1776)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:678)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more

2023.03.27 11:21:30 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java
2023.03.27 11:21:31 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Java/imageProcessing.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:12: error: ';' expected
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat
                                                              ^
1 error
2023.03.27 11:29:19 INFO  Shutting down server
2023.03.27 11:29:19 INFO  shutting down Metals
2023.03.27 11:29:19 INFO  Exiting server
2023.03.27 11:30:09 INFO  Started: Metals version 0.11.11 in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection' for client Visual Studio Code 1.76.2.
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/C:/Users/Manu/AppData/Local/Coursier/cache/v1/https/repo1.maven.org/maven2/com/outr/scribe-slf4j_2.13/3.11.0/scribe-slf4j_2.13-3.11.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
2023.03.27 11:30:12 INFO  time: initialize in 3.38s
2023.03.27 11:30:14 WARN  Build server is not auto-connectable.
2023.03.27 11:30:14 WARN  no build tool detected in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection'. The most common cause for this problem is that the editor was opened in the wrong working directory, for example if you use sbt then the workspace directory should contain build.sbt. 
2023.03.27 11:30:14 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java
Mar 27, 2023 11:30:14 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.ArrayIndexOutOfBoundsException
java.util.concurrent.CompletionException: java.lang.ArrayIndexOutOfBoundsException
	at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:292)
	at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:308)
	at java.util.concurrent.CompletableFuture.uniAccept(CompletableFuture.java:661)
	at java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:646)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.eclipse.jdt.internal.core.util.PublicScanner.getCurrentTokenSource(PublicScanner.java:496)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.swallowUntilSemicolon$1(JavaFoldingRangeExtractor.scala:52)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.gatherImportLines$1(JavaFoldingRangeExtractor.scala:76)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.gather$1(JavaFoldingRangeExtractor.scala:123)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.extract(JavaFoldingRangeExtractor.scala:155)
	at scala.meta.internal.parsing.FoldingRangeProvider.$anonfun$getRangedForJava$2(FoldingRangeProvider.scala:48)
	at scala.Option$WithFilter.map(Option.scala:242)
	at scala.meta.internal.parsing.FoldingRangeProvider.getRangedForJava(FoldingRangeProvider.scala:43)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$3(MetalsLspService.scala:1776)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:678)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more

2023.03.27 11:30:17 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Java/imageProcessing.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:12: error: ';' expected
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat
                                                              ^
1 error
2023.03.27 11:30:17 INFO  time: code lens generation in 3.62s
Mar 27, 2023 11:30:19 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.ArrayIndexOutOfBoundsException
java.util.concurrent.CompletionException: java.lang.ArrayIndexOutOfBoundsException
	at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:292)
	at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:308)
	at java.util.concurrent.CompletableFuture.uniAccept(CompletableFuture.java:661)
	at java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:646)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.eclipse.jdt.internal.core.util.PublicScanner.getCurrentTokenSource(PublicScanner.java:496)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.swallowUntilSemicolon$1(JavaFoldingRangeExtractor.scala:52)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.gatherImportLines$1(JavaFoldingRangeExtractor.scala:76)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.gather$1(JavaFoldingRangeExtractor.scala:123)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.extract(JavaFoldingRangeExtractor.scala:155)
	at scala.meta.internal.parsing.FoldingRangeProvider.$anonfun$getRangedForJava$2(FoldingRangeProvider.scala:48)
	at scala.Option$WithFilter.map(Option.scala:242)
	at scala.meta.internal.parsing.FoldingRangeProvider.getRangedForJava(FoldingRangeProvider.scala:43)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$3(MetalsLspService.scala:1776)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:678)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more

2023.03.27 12:15:29 INFO  Shutting down server
2023.03.27 12:15:29 INFO  shutting down Metals
2023.03.27 12:15:29 INFO  Exiting server
2023.03.27 19:58:46 INFO  Started: Metals version 0.11.11 in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection' for client Visual Studio Code 1.76.2.
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/C:/Users/Manu/AppData/Local/Coursier/cache/v1/https/repo1.maven.org/maven2/com/outr/scribe-slf4j_2.13/3.11.0/scribe-slf4j_2.13-3.11.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
2023.03.27 19:58:48 INFO  time: initialize in 1.86s
2023.03.27 19:58:49 WARN  Build server is not auto-connectable.
2023.03.27 19:58:49 WARN  no build tool detected in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection'. The most common cause for this problem is that the editor was opened in the wrong working directory, for example if you use sbt then the workspace directory should contain build.sbt. 
2023.03.27 19:58:49 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java
2023.03.27 19:58:50 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Java/imageProcessing.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:12: error: ';' expected
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat
                                                              ^
1 error
2023.03.27 19:58:51 INFO  time: code lens generation in 1.12s
Mar 27, 2023 7:58:52 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.ArrayIndexOutOfBoundsException
java.util.concurrent.CompletionException: java.lang.ArrayIndexOutOfBoundsException
	at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:292)
	at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:308)
	at java.util.concurrent.CompletableFuture.uniAccept(CompletableFuture.java:661)
	at java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:646)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.eclipse.jdt.internal.core.util.PublicScanner.getCurrentTokenSource(PublicScanner.java:496)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.swallowUntilSemicolon$1(JavaFoldingRangeExtractor.scala:52)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.gatherImportLines$1(JavaFoldingRangeExtractor.scala:76)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.gather$1(JavaFoldingRangeExtractor.scala:123)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.extract(JavaFoldingRangeExtractor.scala:155)
	at scala.meta.internal.parsing.FoldingRangeProvider.$anonfun$getRangedForJava$2(FoldingRangeProvider.scala:48)
	at scala.Option$WithFilter.map(Option.scala:242)
	at scala.meta.internal.parsing.FoldingRangeProvider.getRangedForJava(FoldingRangeProvider.scala:43)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$3(MetalsLspService.scala:1776)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:678)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more

Mar 27, 2023 7:59:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.ArrayIndexOutOfBoundsException
java.util.concurrent.CompletionException: java.lang.ArrayIndexOutOfBoundsException
	at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:292)
	at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:308)
	at java.util.concurrent.CompletableFuture.uniAccept(CompletableFuture.java:661)
	at java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:646)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.eclipse.jdt.internal.core.util.PublicScanner.getCurrentTokenSource(PublicScanner.java:496)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.swallowUntilSemicolon$1(JavaFoldingRangeExtractor.scala:52)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.gatherImportLines$1(JavaFoldingRangeExtractor.scala:76)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.gather$1(JavaFoldingRangeExtractor.scala:123)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.extract(JavaFoldingRangeExtractor.scala:155)
	at scala.meta.internal.parsing.FoldingRangeProvider.$anonfun$getRangedForJava$2(FoldingRangeProvider.scala:48)
	at scala.Option$WithFilter.map(Option.scala:242)
	at scala.meta.internal.parsing.FoldingRangeProvider.getRangedForJava(FoldingRangeProvider.scala:43)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$3(MetalsLspService.scala:1776)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:678)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more

2023.03.27 22:40:56 INFO  Shutting down server
2023.03.27 22:40:56 INFO  shutting down Metals
2023.03.27 22:40:56 INFO  Exiting server
2023.04.11 09:58:24 INFO  Started: Metals version 0.11.11 in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection' for client Visual Studio Code 1.76.2.
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/C:/Users/Manu/AppData/Local/Coursier/cache/v1/https/repo1.maven.org/maven2/com/outr/scribe-slf4j_2.13/3.11.0/scribe-slf4j_2.13-3.11.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
2023.04.11 09:58:27 INFO  time: initialize in 2.88s
2023.04.11 09:58:30 WARN  Build server is not auto-connectable.
2023.04.11 09:58:30 WARN  no build tool detected in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection'. The most common cause for this problem is that the editor was opened in the wrong working directory, for example if you use sbt then the workspace directory should contain build.sbt. 
2023.04.11 09:58:30 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java
2023.04.11 09:58:31 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Java/imageProcessing.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:12: error: ';' expected
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat
                                                              ^
1 error
Apr 11, 2023 9:58:48 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.ArrayIndexOutOfBoundsException
java.util.concurrent.CompletionException: java.lang.ArrayIndexOutOfBoundsException
	at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:292)
	at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:308)
	at java.util.concurrent.CompletableFuture.uniAccept(CompletableFuture.java:661)
	at java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:646)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.eclipse.jdt.internal.core.util.PublicScanner.getCurrentTokenSource(PublicScanner.java:496)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.swallowUntilSemicolon$1(JavaFoldingRangeExtractor.scala:52)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.gatherImportLines$1(JavaFoldingRangeExtractor.scala:76)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.gather$1(JavaFoldingRangeExtractor.scala:123)
	at scala.meta.internal.parsing.JavaFoldingRangeExtractor.extract(JavaFoldingRangeExtractor.scala:155)
	at scala.meta.internal.parsing.FoldingRangeProvider.$anonfun$getRangedForJava$2(FoldingRangeProvider.scala:48)
	at scala.Option$WithFilter.map(Option.scala:242)
	at scala.meta.internal.parsing.FoldingRangeProvider.getRangedForJava(FoldingRangeProvider.scala:43)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$3(MetalsLspService.scala:1776)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:678)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more

2023.04.11 09:58:50 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java
2023.04.11 09:58:52 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Java/imageProcessing.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:4: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:5: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:6: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.NullWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:7: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:8: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:9: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:10: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Reducer;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:11: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:12: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Java\imageProcessing.java:1: error: semanticdb-javac: unknown flag 'CODE\Java'
import java.io.IOException;
^
10 errors
2023.04.11 15:14:39 INFO  Shutting down server
2023.04.11 15:14:39 INFO  shutting down Metals
2023.04.11 15:14:39 INFO  Exiting server
2023.04.19 21:23:43 INFO  Started: Metals version 0.11.11 in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection' for client Visual Studio Code 1.77.3.
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/C:/Users/Manu/AppData/Local/Coursier/cache/v1/https/repo1.maven.org/maven2/com/outr/scribe-slf4j_2.13/3.11.0/scribe-slf4j_2.13-3.11.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
2023.04.19 21:23:48 INFO  time: initialize in 5.01s
2023.04.19 21:23:49 WARN  Build server is not auto-connectable.
2023.04.19 21:23:49 WARN  no build tool detected in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection'. The most common cause for this problem is that the editor was opened in the wrong working directory, for example if you use sbt then the workspace directory should contain build.sbt. 
2023.04.19 21:23:49 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java
2023.04.19 21:23:51 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMapper.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:24: error: class RadiometricCorrectionMR is public, should be declared in a file named RadiometricCorrectionMR.java
public class RadiometricCorrectionMR {
       ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:73: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:74: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMapper.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
45 errors
2023.04.19 21:23:51 INFO  time: code lens generation in 1.25s
2023.04.19 21:25:00 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.19 21:25:03 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:73: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
44 errors
2023.04.19 21:25:03 INFO  time: code lens generation in 2.07s
2023.04.19 21:36:13 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.19 21:36:15 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:73: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
44 errors
2023.04.19 21:36:18 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.19 21:36:19 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:73: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
44 errors
Apr 19, 2023 9:36:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 79
2023.04.19 21:36:22 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.19 21:36:23 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:73: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
44 errors
2023.04.19 21:36:27 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.19 21:36:28 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.19 21:36:28 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:73: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
44 errors
2023.04.19 21:36:29 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:73: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
44 errors
2023.04.19 21:36:29 INFO  time: code lens generation in 2.58s
2023.04.19 21:36:39 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.19 21:36:40 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:73: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
44 errors
2023.04.19 21:37:14 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.19 21:37:15 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:73: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
44 errors
2023.04.19 21:37:20 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.19 21:37:21 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:69: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:70: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:73: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:75: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:76: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
44 errors
2023.04.20 14:16:17 INFO  Shutting down server
2023.04.20 14:16:17 INFO  shutting down Metals
2023.04.20 14:16:17 INFO  Exiting server
2023.04.22 16:31:35 INFO  Started: Metals version 0.11.11 in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection' for client Visual Studio Code 1.77.3.
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/C:/Users/Manu/AppData/Local/Coursier/cache/v1/https/repo1.maven.org/maven2/com/outr/scribe-slf4j_2.13/3.11.0/scribe-slf4j_2.13-3.11.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
2023.04.22 16:31:37 INFO  time: initialize in 1.63s
2023.04.22 16:31:38 WARN  Build server is not auto-connectable.
2023.04.22 16:31:38 WARN  no build tool detected in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection'. The most common cause for this problem is that the editor was opened in the wrong working directory, for example if you use sbt then the workspace directory should contain build.sbt. 
2023.04.22 16:31:38 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.22 16:31:42 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:84: error: illegal start of expression
        private static byte[] bufferedImageToByteArray(BufferedImage image) throws IOException {
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:84: error: illegal start of expression
        private static byte[] bufferedImageToByteArray(BufferedImage image) throws IOException {
                ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:84: error: ';' expected
        private static byte[] bufferedImageToByteArray(BufferedImage image) throws IOException {
                      ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:84: error: illegal start of expression
        private static byte[] bufferedImageToByteArray(BufferedImage image) throws IOException {
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:84: error: ';' expected
        private static byte[] bufferedImageToByteArray(BufferedImage image) throws IOException {
                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:84: error: ')' expected
        private static byte[] bufferedImageToByteArray(BufferedImage image) throws IOException {
                                                                    ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:84: error: illegal start of expression
        private static byte[] bufferedImageToByteArray(BufferedImage image) throws IOException {
                                                                          ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:84: error: ';' expected
        private static byte[] bufferedImageToByteArray(BufferedImage image) throws IOException {
                                                                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:84: error: not a statement
        private static byte[] bufferedImageToByteArray(BufferedImage image) throws IOException {
                                                                                   ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:84: error: ';' expected
        private static byte[] bufferedImageToByteArray(BufferedImage image) throws IOException {
                                                                                              ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:102: error: reached end of file while parsing
}
 ^
11 errors
2023.04.22 16:31:42 INFO  time: code lens generation in 3.7s
2023.04.22 16:32:12 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.22 16:32:14 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
                float ndvi = computeNDVI(imageRed, imageInfrared, referenceRed, referenceInfrared);
                             ^
  symbol:   method computeNDVI(int,int,int,int)
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:92: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:92: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:93: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:93: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:96: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:97: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:98: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:98: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:98: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
45 errors
2023.04.22 16:32:15 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.22 16:32:16 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.22 16:32:18 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
                float ndvi = computeNDVI(imageRed, imageInfrared, referenceRed, referenceInfrared);
                             ^
  symbol:   method computeNDVI(int,int,int,int)
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:94: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:94: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:95: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:95: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:98: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:101: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:101: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:101: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
45 errors
2023.04.22 16:32:19 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.22 16:32:20 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
                float ndvi = computeNDVI(imageRed, imageInfrared, referenceRed, referenceInfrared);
                             ^
  symbol:   method computeNDVI(int,int,int,int)
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:93: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:93: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:94: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:94: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:97: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:98: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
45 errors
2023.04.22 16:32:21 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.22 16:32:22 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
                float ndvi = computeNDVI(imageRed, imageInfrared, referenceRed, referenceInfrared);
                             ^
  symbol:   method computeNDVI(int,int,int,int)
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:93: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:93: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:94: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:94: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:97: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:98: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
45 errors
2023.04.22 16:32:22 INFO  time: code lens generation in 6.95s
2023.04.22 16:32:23 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
                float ndvi = computeNDVI(imageRed, imageInfrared, referenceRed, referenceInfrared);
                             ^
  symbol:   method computeNDVI(int,int,int,int)
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:93: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:93: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:94: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:94: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:97: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:98: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
45 errors
2023.04.22 16:32:23 INFO  time: code lens generation in 5.1s
2023.04.22 16:32:23 INFO  time: code lens generation in 3.1s
2023.04.22 17:01:54 INFO  Shutting down server
2023.04.22 17:01:54 INFO  shutting down Metals
2023.04.22 17:01:54 INFO  Exiting server
2023.04.22 21:44:15 INFO  Started: Metals version 0.11.12 in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection' for client Visual Studio Code 1.77.3.
Apr 22, 2023 9:44:16 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.16.3 by Redgate
Apr 22, 2023 9:44:16 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Apr 22, 2023 9:44:16 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Apr 22, 2023 9:44:17 PM org.flywaydb.core.internal.database.base.BaseDatabaseType createDatabase
INFO: Database: jdbc:h2:file:C:\Users\Manu\Documents\GitHub\Code-Collection\.metals\metals (H2 2.1)
Apr 22, 2023 9:44:17 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.083s)
Apr 22, 2023 9:44:17 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Apr 22, 2023 9:44:17 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.04.22 21:44:17 INFO  time: initialize in 1.79s
Apr 22, 2023 9:44:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1
2023.04.22 21:44:20 WARN  Build server is not auto-connectable.
2023.04.22 21:44:20 WARN  no build tool detected in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection'. The most common cause for this problem is that the editor was opened in the wrong working directory, for example if you use sbt then the workspace directory should contain build.sbt. 
2023.04.22 21:44:20 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.22 21:44:22 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
                float ndvi = computeNDVI(imageRed, imageInfrared, referenceRed, referenceInfrared);
                             ^
  symbol:   method computeNDVI(int,int,int,int)
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:93: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:93: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:94: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:94: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:97: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:98: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
45 errors
2023.04.22 21:58:58 INFO  Shutting down server
2023.04.22 21:58:58 INFO  shutting down Metals
2023.04.22 21:58:58 INFO  Exiting server
2023.04.23 18:39:46 INFO  Started: Metals version 0.11.12 in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection' for client Visual Studio Code 1.77.3.
Apr 23, 2023 6:39:47 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.16.3 by Redgate
Apr 23, 2023 6:39:47 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Apr 23, 2023 6:39:47 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Apr 23, 2023 6:39:48 PM org.flywaydb.core.internal.database.base.BaseDatabaseType createDatabase
INFO: Database: jdbc:h2:file:C:\Users\Manu\Documents\GitHub\Code-Collection\.metals\metals (H2 2.1)
Apr 23, 2023 6:39:48 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.107s)
Apr 23, 2023 6:39:48 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Apr 23, 2023 6:39:48 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.04.23 18:39:49 INFO  time: initialize in 2.79s
2023.04.23 18:39:51 WARN  Build server is not auto-connectable.
2023.04.23 18:39:51 WARN  no build tool detected in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection'. The most common cause for this problem is that the editor was opened in the wrong working directory, for example if you use sbt then the workspace directory should contain build.sbt. 
2023.04.23 18:39:51 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.23 18:39:54 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
                float ndvi = computeNDVI(imageRed, imageInfrared, referenceRed, referenceInfrared);
                             ^
  symbol:   method computeNDVI(int,int,int,int)
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:93: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:93: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:94: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:94: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:97: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:98: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
45 errors
2023.04.23 18:39:54 INFO  time: code lens generation in 3.71s
Apr 23, 2023 6:40:01 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9
2023.04.23 19:36:37 INFO  Shutting down server
2023.04.23 19:36:37 INFO  shutting down Metals
2023.04.23 19:36:37 INFO  Exiting server
2023.04.23 23:34:56 INFO  Started: Metals version 0.11.12 in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection' for client Visual Studio Code 1.77.3.
Apr 23, 2023 11:34:56 PM org.flywaydb.core.internal.license.VersionPrinter printVersionOnly
INFO: Flyway Community Edition 9.16.3 by Redgate
Apr 23, 2023 11:34:56 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: See release notes here: https://rd.gt/416ObMi
Apr 23, 2023 11:34:56 PM org.flywaydb.core.internal.license.VersionPrinter printVersion
INFO: 
Apr 23, 2023 11:34:58 PM org.flywaydb.core.internal.database.base.BaseDatabaseType createDatabase
INFO: Database: jdbc:h2:file:C:\Users\Manu\Documents\GitHub\Code-Collection\.metals\metals (H2 2.1)
Apr 23, 2023 11:34:58 PM org.flywaydb.core.internal.command.DbValidate validate
INFO: Successfully validated 4 migrations (execution time 00:00.064s)
Apr 23, 2023 11:34:58 PM org.flywaydb.core.internal.command.DbMigrate migrateGroup
INFO: Current version of schema "PUBLIC": 4
Apr 23, 2023 11:34:58 PM org.flywaydb.core.internal.command.DbMigrate logSummary
INFO: Schema "PUBLIC" is up to date. No migration necessary.
2023.04.23 23:34:58 INFO  time: initialize in 2.37s
2023.04.23 23:35:01 WARN  Build server is not auto-connectable.
2023.04.23 23:35:01 WARN  no build tool detected in workspace 'C:\Users\Manu\Documents\GitHub\Code-Collection'. The most common cause for this problem is that the editor was opened in the wrong working directory, for example if you use sbt then the workspace directory should contain build.sbt. 
2023.04.23 23:35:01 WARN  no build target for: C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java
2023.04.23 23:35:05 WARN  Running javac-semanticdb failed for file:///C:/Users/Manu/Documents/GitHub/Code-Collection/VS%20CODE/Minor%20Project%202/RadiometricCorrectionMR.java. Output:
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:7: error: package org.apache.hadoop.conf does not exist
import org.apache.hadoop.conf.Configuration;
                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:8: error: package org.apache.hadoop.fs does not exist
import org.apache.hadoop.fs.Path;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:9: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.Text;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:10: error: package org.apache.hadoop.io does not exist
import org.apache.hadoop.io.BytesWritable;
                           ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:11: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Job;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:12: error: package org.apache.hadoop.mapreduce does not exist
import org.apache.hadoop.mapreduce.Mapper;
                                  ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:13: error: package org.apache.hadoop.mapreduce.lib.input does not exist
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
                                            ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:14: error: package org.apache.hadoop.mapreduce.lib.output does not exist
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
                                             ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:19: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Blob;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:20: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Bucket;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:21: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.Storage;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:22: error: package com.google.cloud.storage does not exist
import com.google.cloud.storage.StorageOptions;
                               ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                            ^
  symbol:   class Mapper
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                           ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                 ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:26: error: cannot find symbol
    public static class RadiometricCorrectionMapper extends Mapper<Object, Text, Text, BytesWritable> {
                                                                                       ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:32: error: cannot find symbol
        private Storage storage;
                ^
  symbol:   class Storage
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:33: error: cannot find symbol
        private Blob referenceBlob;
                ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:36: error: cannot find symbol
        protected void setup(Context context) throws IOException, InterruptedException {
                             ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                    ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:43: error: cannot find symbol
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
                                                ^
  symbol:   class Context
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:37: error: cannot find symbol
            Configuration config = context.getConfiguration();
            ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:38: error: cannot find symbol
            storage = StorageOptions.getDefaultInstance().getService();
                      ^
  symbol:   variable StorageOptions
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:39: error: cannot find symbol
            referenceBlob = storage.get(BlobId.of(REFERENCE_URI));
                                        ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
            ^
  symbol:   class Blob
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:45: error: cannot find symbol
            Blob imageBlob = storage.get(BlobId.of(uri));
                                         ^
  symbol:   variable BlobId
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:50: error: cannot find symbol
            BytesWritable outputValue = new BytesWritable(ByteBuffer.wrap(imageBytes));
                                            ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:51: error: cannot find symbol
            context.write(new Text(uri), outputValue);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:74: error: cannot find symbol
                float ndvi = computeNDVI(imageRed, imageInfrared, referenceRed, referenceInfrared);
                             ^
  symbol:   method computeNDVI(int,int,int,int)
  location: class RadiometricCorrectionMapper
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:93: error: cannot find symbol
        Configuration conf = new Configuration();
        ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:93: error: cannot find symbol
        Configuration conf = new Configuration();
                                 ^
  symbol:   class Configuration
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:94: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
        ^
  symbol:   class Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:94: error: cannot find symbol
        Job job = Job.getInstance(conf, "Radiometric Correction MR");
                  ^
  symbol:   variable Job
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:97: error: cannot find symbol
        job.setOutputKeyClass(Text.class);
                              ^
  symbol:   class Text
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:98: error: cannot find symbol
        job.setOutputValueClass(BytesWritable.class);
                                ^
  symbol:   class BytesWritable
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                              ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
                                                   ^
  symbol:   variable INPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:99: error: cannot find symbol
        FileInputFormat.addInputPath(job, new Path(INPUT_PREFIX));
        ^
  symbol:   variable FileInputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                ^
  symbol:   class Path
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
                                                     ^
  symbol:   variable OUTPUT_PREFIX
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:100: error: cannot find symbol
        FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PREFIX));
        ^
  symbol:   variable FileOutputFormat
  location: class RadiometricCorrectionMR
C:\Users\Manu\Documents\GitHub\Code-Collection\VS CODE\Minor Project 2\RadiometricCorrectionMR.java:1: error: semanticdb-javac: unknown flag 'CODE\Minor'
import java.io.IOException;
^
45 errors
2023.04.23 23:35:05 INFO  time: code lens generation in 4.76s
Apr 23, 2023 11:35:09 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8
2023.04.23 23:36:14 INFO  Shutting down server
2023.04.23 23:36:14 INFO  shutting down Metals
2023.04.23 23:36:14 INFO  Exiting server
